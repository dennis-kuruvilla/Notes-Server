{"version":3,"sources":["components/Note.js","services/notes.js","App.js","index.js"],"names":["Note","note","toggleImportance","label","important","content","onClick","baseUrl","axios","get","then","response","data","newObject","post","id","put","App","useState","notes","setNotes","newNote","setNewNote","showAll","setShowAll","useEffect","noteService","initialNotes","notesToShow","filter","map","find","n","changedNote","returnedNote","catch","error","alert","toggleImportanceOf","onSubmit","event","preventDefault","console","log","target","noteObject","date","Date","toISOString","Math","random","concat","value","onChange","type","ReactDOM","render","document","getElementById"],"mappings":"uKAeeA,EAbF,SAAC,GAAgC,IAA9BC,EAA6B,EAA7BA,KAAMC,EAAuB,EAAvBA,iBAEdC,EAAQF,EAAKG,UACf,qBAAuB,iBAE3B,OACE,+BACGH,EAAKI,QACN,wBAAQC,QAASJ,EAAjB,SAAoCC,QCTpCI,EAAU,aA4BD,EA1BA,WAEb,OADgBC,IAAMC,IAAIF,GACXG,MAAK,SAAAC,GAAQ,OAAIA,EAASC,SAwB5B,EAVA,SAAAC,GAEb,OADgBL,IAAMM,KAAKP,EAASM,GACrBH,MAAK,SAAAC,GAAQ,OAAIA,EAASC,SAQ5B,EALA,SAACG,EAAIF,GAElB,OADgBL,IAAMQ,IAAN,UAAaT,EAAb,YAAwBQ,GAAMF,GAC/BH,MAAK,SAAAC,GAAQ,OAAIA,EAASC,SCuQ5BK,EAjQH,WAEV,MAA0BC,mBAAS,IAAnC,mBAAOC,EAAP,KAAcC,EAAd,KACA,EAA8BF,mBAAS,IAAvC,mBAAOG,EAAP,KAAgBC,EAAhB,KACA,EAA8BJ,oBAAS,GAAvC,mBAAOK,EAAP,KAAgBC,EAAhB,KAEAC,qBAAU,WACRC,IAEGhB,MAAK,SAAAiB,GACNP,EAASO,QAEV,IAGH,IAAMC,EAAcL,EAChBJ,EACAA,EAAMU,QAAO,SAAA5B,GAAI,OAAuB,IAAnBA,EAAKG,aAgD9B,OACE,gCACE,uCACA,8BACE,yBAAQE,QAAS,kBAAMkB,GAAYD,IAAnC,kBACQA,EAAU,YAAc,WAGlC,6BACGK,EAAYE,KAAI,SAAA7B,GAAI,OACjB,cAAC,EAAD,CAAoBA,KAAMA,EAAMC,iBAAkB,kBAjCjC,SAAAa,GACzB,IAAMd,EAAOkB,EAAMY,MAAK,SAAAC,GAAC,OAAIA,EAAEjB,KAAOA,KAChCkB,EAAW,2BAAQhC,GAAR,IAAcG,WAAYH,EAAKG,YAEhDsB,EACQX,EAAIkB,GACTvB,MAAK,SAAAwB,GACNd,EAASD,EAAMW,KAAI,SAAA7B,GAAI,OAAIA,EAAKc,KAAOA,EAAKd,EAAOiC,SAEpDC,OAAM,SAAAC,GACLC,MAAM,aAAD,OACUpC,EAAKI,QADf,sCAGLe,EAASD,EAAMU,QAAO,SAAAG,GAAC,OAAIA,EAAEjB,KAAOA,SAoB0BuB,CAAmBrC,EAAKc,MAArEd,EAAKc,SAGtB,uBAAMwB,SA1DM,SAACC,GACfA,EAAMC,iBACNC,QAAQC,IAAI,iBAAkBH,EAAMI,QACpC,IAAMC,EAAa,CACjBxC,QAASgB,EACTyB,MAAM,IAAIC,MAAOC,cACjB5C,UAAW6C,KAAKC,SAAW,IAI7BxB,EACUmB,GACLnC,MAAK,SAAAwB,GACNd,EAASD,EAAMgC,OAAOjB,IACtBZ,EAAW,QA4Cb,UACE,uBAAO8B,MAAO/B,EAASgC,SAnBJ,SAACb,GACxBE,QAAQC,IAAIH,EAAMI,OAAOQ,OACzB9B,EAAWkB,EAAMI,OAAOQ,UAkBpB,wBAAQE,KAAK,SAAb,yBC7GRC,IAASC,OACP,cAAC,EAAD,IACAC,SAASC,eAAe,W","file":"static/js/main.78d522ef.chunk.js","sourcesContent":["import React from 'react'\n\nconst Note = ({ note, toggleImportance }) => {\n\n  const label = note.important\n    ? 'make not important' : 'make important'\n\n  return (\n    <li>\n      {note.content}\n      <button onClick={toggleImportance}>{label}</button>\n      </li>\n  )\n}\n\nexport default Note","import axios from 'axios'\nconst baseUrl = '/api/notes'\n\nconst getAll = () => {\n  const request = axios.get(baseUrl)\n  return request.then(response => response.data)\n}\n\nconst getAll2 = () => {\n  const request = axios.get(baseUrl)\n  const nonExisting = {\n    id: 10000,\n    content: 'This note is not saved to server',\n    date: '2019-05-30T17:30:31.098Z',\n    important: true,\n  }\n  return request.then(response => response.data.concat(nonExisting))\n}\n\nconst create = newObject => {\n  const request = axios.post(baseUrl, newObject)\n  return request.then(response => response.data)\n}\n\nconst update = (id, newObject) => {\n  const request = axios.put(`${baseUrl}/${id}`, newObject)\n  return request.then(response => response.data)\n}\n\nexport default { \n  getAll, create, update\n}","import React, { useState, useEffect } from 'react'\nimport axios from 'axios'\nimport Note from './components/Note'\nimport noteService from './services/notes'\n\n\n\n//RENDERING A COLLECTION + GETTING FORM INPUT + FILTERING COLLECTION TO BE DISPLAYED----------------------------------------------------------------------------\n//DEFINGING AN ARRAY FOR RENDERING A COLLECTION\n\n//Following array definition was before we fetch the data from JSON server\n// const notes1 = [\n//   {\n//     id: 1,\n//     content: 'HTML is easy',\n//     date: '2019-05-30T17:30:31.098Z',\n//     important: true\n//   },\n//   {\n//     id: 2,\n//     content: 'Browser can execute only JavaScript',\n//     date: '2019-05-30T18:39:34.091Z',\n//     important: false\n//   },\n//   {\n//     id: 3,\n//     content: 'GET and POST are the most important methods of HTTP protocol',\n//     date: '2019-05-30T19:20:14.298Z',\n//     important: true\n//   }\n// ]\n\nconst App = () => {\n\n  const [notes, setNotes] = useState([])\n  const [newNote, setNewNote] = useState('') \n  const [showAll, setShowAll] = useState(true)\n\n  useEffect(() => {\n    noteService\n      .getAll()\n      .then(initialNotes => {\n      setNotes(initialNotes)\n    })\n  }, [])\n\n\n  const notesToShow = showAll\n    ? notes\n    : notes.filter(note => note.important === true)\n\n  //Event Handler for button to add note\n  const addNote = (event) => {\n    event.preventDefault() //prevents the default action of submitting a form. The default action would, among other things, cause the page to reload.\n    console.log('button clicked', event.target)\n    const noteObject = {\n      content: newNote,\n      date: new Date().toISOString(),\n      important: Math.random() < 0.5,\n      //id: notes.length + 1,    not adding id since id will be automatically populated when the object is added to json server\n    }\n    \n    noteService\n      .create(noteObject)\n        .then(returnedNote => {\n        setNotes(notes.concat(returnedNote))\n        setNewNote('')\n      })\n\n    //following 2 lines of code is to add the user entered string to the notes array defined above. replaced it by updating the data in json server\n    // setNotes(notes.concat(response.data))\n    // setNewNote('')\n  }\n\n  const toggleImportanceOf = id => {\n    const note = notes.find(n => n.id === id)\n    const changedNote = { ...note, important: !note.important }\n  \n    noteService\n    .update(id, changedNote)\n      .then(returnedNote => {\n      setNotes(notes.map(note => note.id !== id ? note : returnedNote))\n    })\n    .catch(error => {\n      alert(\n        `the note '${note.content}' was already deleted from server`\n      )\n      setNotes(notes.filter(n => n.id !== id))\n    })    \n  }\n\n  //funstion to handle controlled component (user input box)\n  const handleNoteChange = (event) => {\n    console.log(event.target.value)\n    setNewNote(event.target.value)\n  }\n\n  return (\n    <div>\n      <h1>Notes</h1>\n      <div>\n        <button onClick={() => setShowAll(!showAll)}>\n          show {showAll ? 'important' : 'all' }\n        </button>\n      </div>\n      <ul>\n        {notesToShow.map(note => \n            <Note key={note.id} note={note} toggleImportance={() => toggleImportanceOf(note.id)} />\n        )}\n      </ul>\n      <form onSubmit={addNote}>\n        <input value={newNote} onChange={handleNoteChange} />\n        <button type=\"submit\">save</button>\n      </form>   \n    </div>\n  )\n}\n\n//PASSING EVENT HANDLERS TO CHILD---------------------------------------------------------------------------------------------------------------------------\n\n// This is the right place to define a component\nconst Button6 = (props) => (\n  <button onClick={props.handleClick}>\n    {props.text}\n  </button>\n)\n\nconst Display6 = props => <div>{props.value}</div>\n\nconst App6 = () => {\n  const [value, setValue] = useState(10)\n\n  const setToValue = newValue => {\n    setValue(newValue)\n  }\n\n  // Do not define components inside another component\n  //const Display = props => <div>{props.value}</div>\n\n  return (\n    <div>\n      <Display6 value={value} />\n      <Button6 handleClick={() => setToValue(1000)} text=\"thousand\" />\n      <Button6 handleClick={() => setToValue(0)} text=\"reset\" />\n      <Button6 handleClick={() => setToValue(value + 1)} text=\"increment\" />\n    </div>\n  )\n}\n\n//FUNCTIONS THAT RETURN A FUNCTION----------------\nconst App5 = () => {\n  const [value, setValue] = useState(10)\n  \n  //following function returns a func. hence this func is called using () in onClick\n  const setToValue = (newValue) => () => {\n    setValue(newValue)\n  }\n  \n  return (\n    <div>\n      {value}\n      <button onClick={setToValue(1000)}>thousand</button>\n      <button onClick={setToValue(0)}>reset</button>\n      <button onClick={setToValue(value + 1)}>increment</button>\n    </div>\n  )\n}\n\n\n//ARRAY AS STATE------------\nconst App4 = () => {\n  const [left, setLeft] = useState(0)\n  const [right, setRight] = useState(0)\n  const [allClicks, setAll] = useState([])\n\n  const handleLeftClick = () => {\n    setAll(allClicks.concat('L'))\n    setLeft(left + 1)\n  }\n\n  const handleRightClick = () => {\n    setAll(allClicks.concat('R'))\n    setRight(right + 1)\n  }\n\n  return (\n    <div>\n      {left}\n      <button onClick={handleLeftClick}>left</button>\n      <button onClick={handleRightClick}>right</button>\n      {right}\n      <p>{allClicks.join(' ')}</p>\n    </div>\n  )\n}\n\n\n//EVEN HANDLING. INLINE LISTENER-------------\nconst App3 = () => {\n  const [ counter, setCounter ] = useState(0)\n\n  const increaseByOne = () => setCounter(counter + 1)\n  const setToZero = () => setCounter(0)\n\n  return (\n    <div>\n      <Display3 counter={counter}/>\n      <button onClick={increaseByOne}>\n        plus\n      </button>\n      <button onClick={setToZero}> \n        zero\n      </button>\n    </div>\n  )\n}\n\nconst Display3 = (props) => {\n\n  const [ counter2, setCounter2 ] = useState(0)\n  return (<>\n    <div>{props.counter}</div>\n    <div> nested counter: {counter2}\n    <button onClick={() => {setCounter2(counter2+1)}}>\n        plus(nested)\n      </button>\n      <button onClick={() => {setCounter2(0)}}> \n        zero(nested)\n      </button>\n    </div>\n    </>\n  )\n}\n\n\n//EVENT HANDLING FUNCTION----------------\nconst App2 = () => {\n  const [ counter, setCounter ] = useState(0)\n\n  const handleClick = () => {\n    setCounter(counter+1)\n  }\n\n  const handleClick2 = () => {\n    setCounter(0)\n  }\n\n  return (\n    <div>\n      <div>{counter}</div>\n      <button onClick={handleClick}>\n        plus\n      </button>\n      <button onClick={handleClick2}>\n        reser\n      </button>\n    </div>\n  )\n}\n\n\nconst Hello = ({ name, age }) => {\n  \n  const bornYear = () => new Date().getFullYear() - age\n\n  return (\n    <div>\n      <p>Hello {name}, you are {age} years old</p>\n      <p>So you were probably born in {bornYear()}</p>\n    </div>\n  )\n}\n\nconst App1 = () => {\n  const name = 'Peter'\n  const age = 10\n\n  return (\n    <div>\n      <h1>Greetings</h1>\n      <Hello name=\"Maya\" age={26 + 10} />\n      <Hello name={name} age={age} />\n    </div>\n  )\n}\n\n\n//---------------------------------\n\nexport default App","import ReactDOM from 'react-dom'\nimport App from './App'\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root')\n)"],"sourceRoot":""}